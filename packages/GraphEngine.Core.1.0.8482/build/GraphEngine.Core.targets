<?xml version="1.0" encoding="utf-8"?>
<!--
*   Consume .tsl files and produce C# types
*
*   (Dependencies are defined by Tsl.CSharp.props.  Be sure to import that first)
*   Dependencies:
*     $TSL_PATH  : Path to directory containing Trinity.TSL.CompilerTask.dll
*
*   User-Defines:
*     @TslCodegen         : A tsl file to compile
*     $TslOutputDirectory : Output directory for the generated files, by default IntermediateOutputPath
*
-->
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!--This property is used as OutputPath parameter in TSL_COMPILER_TASK-->
    <TslOutputPath Condition=" '$(TslOutputPath)' == '' ">$(IntermediateOutputPath)</TslOutputPath>
    <!--This property is used to specify the location of the genreated source code-->
    <TslGeneratedCodePath Condition=" '$(TslGeneratedCodePath)' == '' ">$(IntermediateOutputPath)GeneratedCode\</TslGeneratedCodePath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TslDebugArguments)' == ''">
    <TslDebugArguments Condition="'$(Configuration)' != 'Release'">--BuildDataModelingProjectWithDebugFeatures</TslDebugArguments>
    <TslDebugArguments Condition="'$(Configuration)' == 'Release'"></TslDebugArguments>
  </PropertyGroup>

  <UsingTask TaskName="Trinity.TSL.TSLCompilerTask" AssemblyFile="$(TSL_COMPILER_TASK_PATH)" Condition=" Exists('$(TSL_COMPILER_TASK_PATH)') "/>
  <UsingTask TaskName="Trinity.TSL.GenerateGraphEngineAssemblyInfo" AssemblyFile="$(TSL_COMPILER_TASK_PATH)" Condition=" Exists('$(TSL_COMPILER_TASK_PATH)') "/>

  <ItemGroup>
    <AvailableItemName Include="TslCodegen" />
  </ItemGroup>

  <!--
    * TslCodegenCs - transform .bond files into .cs files
    *    If we use output transforms from TslCodegen to the resulting targets we can get partial/minimal rebuilds
    *    on change, but this doesn't reflect the internal import logic of bond.  A change to common.bond would
    *    only rebuild common*cs, not all the others that import common.bond.  Without a bond parser prepass we
    *    must rebuild all .bond files when any of them change.  We force that by putting a non-transform output
    *    (bondfiles.tmp) in the list so IFF any input changes, then all inputs rebuild since MSBuild can't
    *    know what should create the unmapped output item and so can't be selective.
    *    NOTE - this still won't catch changes to files outside declared TslCodegen elements.
  -->
  <Target Name="TslCodegenCs"
          Inputs="@(TslCodegen)"
          Outputs="$(TslGeneratedCodePath)\**\*.cs"
          BeforeTargets="CoreCompile"
          Condition="'@(TslCodegen)' != ''">

    <RemoveDir Directories="$(TslGeneratedCodePath)" ContinueOnError="true" />
    <MakeDir Directories="$(TslGeneratedCodePath)" ContinueOnError="true"/>
    <TSLCompilerTask TrinityPath="$(TSL_PATH)tools" 
                     ProjectRoot="$(MSBuildProjectDirectory)" 
                     ScriptList="@(TslCodegen)" 
                     OutputPath="$(TslOutputPath)" 
                     AssemblyName="_not_compile_tsl_.dll" 
                     Command="$(TslDebugArguments) --BuildDataModelingProject"
                     RootNamespace="$(RootNamespace)"
                     GenCodeOnly="true"/>
    <!-- The TSL compiler will generate an assembly info. We don't need it here. -->
    <Delete Files="$(TslGeneratedCodePath)AssemblyInfo.cs"/>

  </Target>

  <Target Name="TslGenerateAssemblyInfo" BeforeTargets="BeforeBuild" DependsOnTargets="ResolveProjectReferences;ResolveAssemblyReferences">
    <GenerateGraphEngineAssemblyInfo ReferencedAssemblies="@(_ResolveAssemblyReferenceResolvedFiles)" Output="Properties\GraphEngine.AssemblyInfo.cs"/>
    <ItemGroup>
      <Compile Include="Properties\GraphEngine.AssemblyInfo.cs"/>
    </ItemGroup>
  </Target>

  <Target Name="TslCodegenClean"
          BeforeTargets="Clean">
    <RemoveDir Directories="$(TslOutputDirectory)" ContinueOnError="true" />
  </Target>

  <!--
    * TslCompileCs - whether or not we are rebuilding sources, we still need them compiled,
    *                      so this target should always run.
  -->
  <Target Name="TslCompileCs"
          BeforeTargets="CoreCompile"
          Condition="'@(TslCodegen)' != ''">

    <Error
      Text="A Graph Engine project cannot be built with Prefer32Bit option enabled. Please uncheck the toggle in project properties page, or edit the project file."
      Condition=" $(Prefer32Bit) == true " />

    <Error
      Text="A Graph Engine project should target AnyCPU or x64. Please change the platform in the project properties page, or edit the project file."
      Condition=" '$(Platform)' != 'AnyCPU' AND '$(Platform)' != 'anycpu' AND '$(Platform)' != 'x64' " />

    <ItemGroup>
      <_TslGeneratedFiles Include="$(TslGeneratedCodePath)**\*.cs">
        <AutoGen>true</AutoGen>
      </_TslGeneratedFiles>

      <_TslGeneratedFileNames Include="@(_TslGeneratedFiles)"/>
      <Compile Include="@(_TslGeneratedFileNames)" />

      <!--
        * MsBuild wants to keep track of all our outputs, to understand how to clean build.  It seems it
        * needs to know all of them regardless of what we actually produced THIS build, so adding always.
      -->
      <FileWrites Include="@(_TslGeneratedFileNames)" />
    </ItemGroup>
  </Target>
</Project>
